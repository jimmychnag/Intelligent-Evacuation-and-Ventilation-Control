C51 COMPILER V9.51   LCD1602                                                               06/28/2025 16:18:59 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE LCD1602
OBJECT MODULE PLACED IN LCD1602.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Hardware\LCD1602.c BROWSE INCDIR(.\Hardware;.\Library;.\System;.\User) DEBU
                    -G OBJECTEXTEND PRINT(.\LCD1602.lst) TABS(2) OBJECT(LCD1602.obj)

line level    source

   1          #include <REGX51.H>
   2          #include "I2C_8051.h"
   3          #include "Delay.h"
   4          
   5          #define SLAVE 0x4E //0x27 << 1
   6          
   7          void WriteInst4bits(unsigned char inst_4b)
   8          {
   9   1          start();
  10   1          send_8bits(SLAVE);  
  11   1          ack_receive();
  12   1          send_8bits(0x0C);         //EN=1 RW=0 RS=0
  13   1          ack_receive();
  14   1          send_8bits((inst_4b&0xF0)+0x0C); //??D7-D4
  15   1          ack_receive();
  16   1          send_8bits(0x08); //EN=0 ?????
  17   1          ack_receive();
  18   1          stop();
  19   1      }
  20          
  21          void WriteInst(unsigned char inst)
  22          { 
  23   1          start();
  24   1          send_8bits(SLAVE);  
  25   1          ack_receive();
  26   1          send_8bits(0x0C);         //EN=1 RW=0 RS=1
  27   1          ack_receive();
  28   1          send_8bits((inst&0xF0)+0x0C);   //???
  29   1          ack_receive();
  30   1          send_8bits(0x08);   //EN=0 ????
  31   1          ack_receive();
  32   1      
  33   1          send_8bits(0x0C);         //EN=1
  34   1          ack_receive();
  35   1          send_8bits((inst<<4)+0x0C);    //???
  36   1          ack_receive();
  37   1          send_8bits(0x08);    //EN=0 ????
  38   1          ack_receive();
  39   1          stop();
  40   1      } 
  41          
  42          void WriteData(unsigned char data_)
  43          {
  44   1          start();
  45   1          send_8bits(SLAVE);  
  46   1          ack_receive();
  47   1        
  48   1          send_8bits(0x0D);         //EN=1 RW=0 RS=1
  49   1          ack_receive();
  50   1          send_8bits((data_&0xF0)+0x0D);  
  51   1          ack_receive();
  52   1          send_8bits(0x09);  
  53   1          ack_receive();
  54   1        
C51 COMPILER V9.51   LCD1602                                                               06/28/2025 16:18:59 PAGE 2   

  55   1          send_8bits(0x0D);         //EN=1 RW=0 RS=1
  56   1          ack_receive();
  57   1          send_8bits((data_<<4)+0x0D);   
  58   1          ack_receive();
  59   1          send_8bits(0x09);   
  60   1          ack_receive();
  61   1          
  62   1          stop();
  63   1      } 
  64          
  65          void WriteString(unsigned char* string)
  66          {
  67   1          while(*string )
  68   1          {
  69   2            WriteData(*string);
  70   2            string++;
  71   2          }
  72   1      }
  73          
  74          void initial(void)
  75          {
  76   1          delay(15000);
  77   1      
  78   1          WriteInst4bits(0x30); 
  79   1          delay(4100);
  80   1      
  81   1          WriteInst4bits(0x30); 
  82   1          delay(100);
  83   1      
  84   1          WriteInst4bits(0x30); 
  85   1          delay(100);
  86   1      
  87   1          WriteInst4bits(0x20); 
  88   1      
  89   1          WriteInst(0x28); 
  90   1          WriteInst(0x08); 
  91   1          WriteInst(0x01); 
  92   1          WriteInst(0x06); 
  93   1          WriteInst(0x0E); 
  94   1          WriteInst(0x0C);  
  95   1      }
  96          
  97          void CG_RAM_write(unsigned char* ptr)
  98          {
  99   1          WriteInst(0x40);
 100   1          while(*ptr)
 101   1          {
 102   2              WriteData(*ptr++);
 103   2          }
 104   1      }
 105          
 106          void dis_p(char row,column)
 107          {
 108   1          char change_p;
 109   1          row--;column--;
 110   1          change_p = 0x80 + (row*0x40 + column);
 111   1          WriteInst(change_p);
 112   1      }
 113          void WriteNum(unsigned char Num)
 114          {
 115   1          WriteData(Num + '0');
 116   1      }
C51 COMPILER V9.51   LCD1602                                                               06/28/2025 16:18:59 PAGE 3   

 117          
 118          void WriteFloat(float T,unsigned char row,unsigned char column)
 119          {
 120   1          unsigned char Temp_H[3];
 121   1          unsigned char Temp_L[4];
 122   1          
 123   1          if(T<0)
 124   1          {
 125   2              dis_p(row,column);
 126   2              WriteString("-");
 127   2              T = -T;
 128   2          }
 129   1          else
 130   1          {
 131   2              dis_p(row,column);
 132   2              WriteString("+");
 133   2          }
 134   1          
 135   1          Temp_H[0] = (unsigned int)T / 100  % 10;
 136   1          Temp_H[1] = (unsigned int)T / 10 % 10;
 137   1          Temp_H[2] = (unsigned int)T / 1 % 10;
 138   1          dis_p(row,column+1);
 139   1          WriteData(Temp_H[0] + '0');
 140   1          dis_p(row,column+2);
 141   1          WriteData(Temp_H[1] + '0');
 142   1          dis_p(row,column+3);
 143   1          WriteData(Temp_H[2] + '0');
 144   1          dis_p(row,column+4);
 145   1          WriteString(".");
 146   1          Temp_L[0] = ( (unsigned long)(T*10000)%10000 ) /1000 %10;
 147   1          Temp_L[1] = ( (unsigned long)(T*10000)%10000 ) /100 %10;
 148   1          Temp_L[2] = ( (unsigned long)(T*10000)%10000 ) /10 %10;
 149   1          Temp_L[3] = ( (unsigned long)(T*10000)%10000 ) /1 %10;
 150   1          dis_p(row,column+5);
 151   1          WriteData(Temp_L[0] + '0');
 152   1          dis_p(row,column+6);
 153   1          WriteData(Temp_L[1] + '0');
 154   1          dis_p(row,column+7);
 155   1          WriteData(Temp_L[2] + '0');
 156   1          dis_p(row,column+8);
 157   1          WriteData(Temp_L[3] + '0');
 158   1      }
 159          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    885    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
